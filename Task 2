import numpy as np  # linear algebra
import pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.utils import shuffle
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('F:/python assignment/Customers.csv')  # Correct the path if needed

# Drop missing values
df.dropna(inplace=True)

# Display basic information about the dataset
print(df.info())
print(df.describe())

# Shuffle the dataset
df = shuffle(df)

# Encode categorical variables
LE = LabelEncoder()
df['Gender'] = LE.fit_transform(df['Gender'])
df['Profession'] = LE.fit_transform(df['Profession'])

# Drop the 'CustomerID' column
df.drop('CustomerID', inplace=True, axis=1)

# Display the first few rows of the dataframe
print(df.head())

# Separate features and target variable
X = df.iloc[:, :-1].values  # All columns except the last one as features
y = df.iloc[:, -1].values   # The last column as the target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Standardize the features
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Initialize and train the regressor
regressor = RandomForestRegressor(n_estimators=20, random_state=0)
regressor.fit(X_train, y_train)

# Predict the target variable for the test set
y_pred = regressor.predict(X_test)

# Feature importance
features = df.columns[:-1]  # All column names except the last one
feat_importances = pd.Series(regressor.feature_importances_, index=features)
feat_importances.nlargest(6).plot(kind='barh')
plt.show()

# Evaluate the model
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
